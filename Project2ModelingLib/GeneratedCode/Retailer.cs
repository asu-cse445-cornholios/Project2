//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;

public class Retailer
{
    private double _currentPrice;

    public virtual void RetailerFunc()
    {
        Order orderObj = new Order();

        //change n depending on specified retailer #
        for (int n = 0; n < 10; n++)
        {
            //sends order to encoder
            string encoded = orderObj.Encode();
            
            orderObj.CreatedTime = DateTime.UtcNow;

            //send encoded string to free cell in multiCellBuffer
            MultiCellBuffer cell = new MultiCellBuffer();
            cell.SetOneCell(encoded);

        }
    }

    private static void CallBack(Order orderObj)
    {
        DateTime timeReceive = DateTime.UtcNow;
        TimeSpan elapsedTime = timeReceive - orderObj.CreatedTime;

        Console.WriteLine("Time of order{0}: {1}", Thread.CurrentThread.Name, elapsedTime);

        //few questions:
        //1) orderTime/receiveTime would have to be public? Or is order time completion handled 
        //   in the order class, and order time printed out here as opposed to the order completion
        //   event to be handled by retailer.\?  
        //2) multiCellBuffer needs to take in a string?
    }

    public virtual void OnPriceCut() //event handler
	{
        //Each retailer contains a call-back
        //method (event handler) for the ChickenFarm to call when a price-cut
        //event occurs. The retailer will calculate the number of chickens 
        //to order, for example, based on the need and the difference between
        //the previous price and the current price. The thread will terminate
        //after the ChickenFarm thread has terminated. 




        //store previous price shomewhere

        //previousPrice - currentPrice --> what are we doing with this value? return to ChickenFarm

        //Console.WriteLine("Store{0} chickens are on sale: as low as ${1} each", Thread.CurrentThread.Name, p);
	    
        //terminate if chickenfarm thread has terminated
       // Thread.CurrentThread.Abort;
    }
}

